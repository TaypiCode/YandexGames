<!-- Yandex Games SDK -->
    <script src="https://yandex.ru/games/sdk/v2"></script>


    
    <script>
	//AdsScript должен быть отдельным элементом на сцене с таким же именем
	//меняется Maze
        var unityInstance = window.unityInstance = UnityLoader.instantiate("unityContainer", "Build/Maze.json", { onProgress: UnityProgress });
        var sdk;
        var payments = null;

        YaGames.init({
            adv: {
                onAdvClose: wasShown => {
                    console.info('adv closed!');
                }
            }
        })
            .then(ysdk => {
                sdk = ysdk;
		        //show ads when start game
                sdk.adv.showFullscreenAdv({ callbacks: {} });

                //init payments
                sdk.getPayments({ signed: true }).then(_payments => {
                    // Покупки доступны.
                    payments = _payments;
                    payments.getPurchases().then(purchases => {
                        if (purchases.some(purchase => purchase.productID === 'removeAds')) {
                          window.unityInstance.SendMessage('ShopScript', 'AlreadyBought', purchase.productID);	//call unity
                        }
                    }).catch(err => {
                        // Выбрасывает исключение USER_NOT_AUTHORIZED для неавторизованных пользователей.
                    });
                }).catch(err => {
                    // Покупки недоступны. Включите монетизацию в консоли разработчика.
                    // Убедитесь, что на вкладке Покупки консоли разработчика присутствует таблица
                    // хотя бы с одним внутриигровым товаром и надписью «Покупки разрешены».
                });
                
            });


        function ShowInterstitialAdFromUnity() {
            sdk.adv.showFullscreenAdv({	//sdk function
                callbacks: {
		    onOpen: () => {
                        console.log('Video Ad open. id:' + id);
			window.unityInstance.SendMessage('AdsScript', 'OnAdsOpen'); //call unity
                    },
                    onClose: function (wasShown) {
                        console.log('Video Interstitial Ad closed.');
                        window.unityInstance.SendMessage('AdsScript', 'OnNonRewardAdsShowed'); //call unity
			window.unityInstance.SendMessage('AdsScript', 'OnAdsClose'); //call unity
                        // some action after close
                    },
                    onError: function (error) {
                        // some action on error
                        window.unityInstance.SendMessage('AdsScript', 'OnAdsError'); //call unity
                    }
                }
            });
        }
        function ShowRewardAdFromUnity(id) {
            sdk.adv.showRewardedVideo({	//sdk function
                callbacks: {
                    onOpen: () => {
                        console.log('Video Rewarded Ad open. id:' + id);
			window.unityInstance.SendMessage('AdsScript', 'OnAdsOpen'); //call unity
                    },
                    onRewarded: () => {
                        console.log('Rewarded! id:' + id);
                        window.unityInstance.SendMessage('AdsScript', 'OnAdsReward', id);	//call unity
                    },
                    onClose: () => {
                        console.log('Video Rewarded Ad closed. id:' + id);
			window.unityInstance.SendMessage('AdsScript', 'OnAdsClose'); //call unity
                    },
                    onError: (e) => {
                        console.log('Error while open video Rewarded Ad:', e);
                        window.unityInstance.SendMessage('AdsScript', 'OnAdsError'); //call unity
                    }
                }
            });
        }


	//save

	window.onbeforeunload = function(e) {
     		window.unityInstance.SendMessage("OnCloseScript", "OnClose");
 	};

	
	//leaderboard
	function SetLeaderboardDataFromUnity(leaderboadrName, leaderboardValue){
		sdk.getLeaderboards()
  			.then(lb => {
    			// Без extraData
    			lb.setLeaderboardScore((leaderboadrName, leaderboardValue));
  		});
	}
        

        function PurchaseFromUnity(item_id){
            payments.purchase({ id: item_id }).then(purchase => {
                console.log('Покупка успешно совершена! id:' +  item_id);
                window.unityInstance.SendMessage('ShopScript', 'PurchaseSucces', item_id);	//call unity
            }).catch(err => {
                // Покупка не удалась: в консоли разработчика не добавлен товар с таким id,
                // пользователь не авторизовался, передумал и закрыл окно оплаты,
                // истекло отведенное на покупку время, не хватило денег и т. д.
            });
        }


	
    </script>